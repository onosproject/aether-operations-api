// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

option go_package = "github.com/opencord/roc-api/api/v1";

package application;

import "protoc-gen-openapiv2/options/annotations.proto";
import "api/v1/endpoint.proto";
import "google/api/field_behavior.proto";
import "pb/graphql.proto";
import "google/api/annotations.proto";

message Application {
  string ID = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {title: "The ID field.", description: "Unique identifier for applications", pattern: "[a-zA-Z]"},
    (google.api.field_behavior) = REQUIRED
  ];
  string description = 2;
  repeated endpoint.Endpoint endpoint = 3;
}

message Applications {
  repeated Application applications = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "A list of Application objects"}];
}

message EnterpriseId {
  string enterpriseId = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    pattern: "[a-zA-Z]",
    title: "EnterpriseId",
    description: "Unique identifier for enterprise",
    format: "string",
    example: "\"acme\""
  }];
}

service ApplicationService {
  rpc GetApplications(EnterpriseId) returns (application.Applications) {
    option (danielvladco.protobuf.graphql.rpc) = {type: QUERY};
    option (google.api.http) = {
      get: "/api/v1/enterpise/{enterpriseId}/applications",
      additional_bindings {
        // NOTE all the fields in the Request Parameter (EnterpriseId) which are not in the path
        // are automatically added to query paramenters
        get: "/api/v1/applications"
      }
    };
  }

  rpc CreateApplication(application.Application) returns (application.Application) {
    option (danielvladco.protobuf.graphql.rpc) = {type: MUTATION};
    option (google.api.http) = {
      post: "/api/v1/applications"
      body: "*"
    };
  }
}