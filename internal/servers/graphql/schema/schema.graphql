directive @ApplicationService on FIELD_DEFINITION
directive @DeviceGroupService on FIELD_DEFINITION
directive @DeviceService on FIELD_DEFINITION
directive @EnterpriseService on FIELD_DEFINITION
directive @SimCardService on FIELD_DEFINITION
directive @SiteService on FIELD_DEFINITION
directive @SliceService on FIELD_DEFINITION
directive @SmallCellService on FIELD_DEFINITION
type Application {
    id: String
    name: String
    description: String
    endpoints: [Endpoint!]
}
input ApplicationInput {
    id: String
    name: String
    description: String
    endpoints: [EndpointInput!]
}
type Device {
    id: String
    name: String
    description: String
    attached: String
    imei: String
    ip: String
    simCard: SimCard
    deviceGroups: [DeviceGroup!]
}
type DeviceGroup {
    id: String
    name: String
    description: String
}
type Endpoint {
    id: String
    name: String
    description: String
    mbr: MBR
    portStart: Int
    portEnd: Int
    protocol: String
}
input EndpointInput {
    id: String
    name: String
    description: String
    mbr: MBRInput
    portStart: Int
    portEnd: Int
    protocol: String
}
type Enterprise {
    id: String
    name: String
    description: String
    applications: [Application!]
    sites: [Site!]
}
type SimCard {
    id: String
    name: String
    description: String
}
type Site {
    id: String
    name: String
    description: String
    devices: [Device!]
    smallCells: [SmallCell!]
    """
    repeated simcards.v1.SimCard sim_cards = 7;
    """
    slices: [Slice!]
}
type Slice {
    id: String
    name: String
    description: String
}
type SmallCell {
    id: String
    name: String
    description: String
}

input GetApplicationsRequestInput {
    enterpriseId: String
}
type GetApplicationsResponse {
    applications: [Application!]
}
input GetDeviceGroupsRequestInput {
    enterpriseId: String
    siteId: String
}
type GetDeviceGroupsResponse {
    deviceGroups: [DeviceGroup!]
}
input GetDevicesRequestInput {
    enterpriseId: String
    siteId: String
}
type GetDevicesResponse {
    devices: [Device!]
}
type GetEnterprisesResponse {
    enterprises: [Enterprise!]
}
input GetSimCardsRequestInput {
    enterpriseId: String
    siteId: String
}
type GetSimCardsResponse {
    simCards: [SimCard!]
}
input GetSitesRequestInput {
    enterpriseId: String
}
type GetSitesResponse {
    sites: [Site!]
}
input GetSlicesRequestInput {
    enterpriseId: String
    siteId: String
}
type GetSlicesResponse {
    slices: [Slice!]
}
input GetSmallCellsRequestInput {
    enterpriseId: String
    siteId: String
}
type GetSmallCellsResponse {
    smallCells: [SmallCell!]
}
type MBR {
    uplink: Int
    downlink: Int
}
input MBRInput {
    uplink: Int
    downlink: Int
}

type Query {
    enterprises: GetEnterprisesResponse!
    applications(enterpriseID: ID!): GetApplicationsResponse!
    sites(enterpriseID: ID!): GetSitesResponse!
    devices(enterpriseID: ID!, siteID: ID!): GetDevicesResponse!
    devicesGroups(enterpriseID: ID!, siteID: ID!): GetDeviceGroupsResponse!
    simCards(enterpriseID: ID!, siteID: ID!): GetSimCardsResponse!
    slices(enterpriseID: ID!, siteID: ID!): GetSlicesResponse!
    smallCells(enterpriseID: ID!, siteID: ID!): GetSmallCellsResponse!
}

type Mutation {
    createApplication(in: ApplicationInput): Application
}
