// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnterpriseServiceClient is the client API for EnterpriseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterpriseServiceClient interface {
	GetEnterprises(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEnterprisesResponse, error)
}

type enterpriseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterpriseServiceClient(cc grpc.ClientConnInterface) EnterpriseServiceClient {
	return &enterpriseServiceClient{cc}
}

func (c *enterpriseServiceClient) GetEnterprises(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEnterprisesResponse, error) {
	out := new(GetEnterprisesResponse)
	err := c.cc.Invoke(ctx, "/enterprises.v1.EnterpriseService/GetEnterprises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnterpriseServiceServer is the server API for EnterpriseService service.
// All implementations must embed UnimplementedEnterpriseServiceServer
// for forward compatibility
type EnterpriseServiceServer interface {
	GetEnterprises(context.Context, *emptypb.Empty) (*GetEnterprisesResponse, error)
	mustEmbedUnimplementedEnterpriseServiceServer()
}

// UnimplementedEnterpriseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnterpriseServiceServer struct {
}

func (UnimplementedEnterpriseServiceServer) GetEnterprises(context.Context, *emptypb.Empty) (*GetEnterprisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterprises not implemented")
}
func (UnimplementedEnterpriseServiceServer) mustEmbedUnimplementedEnterpriseServiceServer() {}

// UnsafeEnterpriseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterpriseServiceServer will
// result in compilation errors.
type UnsafeEnterpriseServiceServer interface {
	mustEmbedUnimplementedEnterpriseServiceServer()
}

func RegisterEnterpriseServiceServer(s grpc.ServiceRegistrar, srv EnterpriseServiceServer) {
	s.RegisterService(&EnterpriseService_ServiceDesc, srv)
}

func _EnterpriseService_GetEnterprises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServiceServer).GetEnterprises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprises.v1.EnterpriseService/GetEnterprises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServiceServer).GetEnterprises(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EnterpriseService_ServiceDesc is the grpc.ServiceDesc for EnterpriseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterpriseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enterprises.v1.EnterpriseService",
	HandlerType: (*EnterpriseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnterprises",
			Handler:    _EnterpriseService_GetEnterprises_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enterprises.proto",
}
