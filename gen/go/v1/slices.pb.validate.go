// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: slices.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Slice with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Slice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Slice with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SliceMultiError, or nil if none found.
func (m *Slice) ValidateAll() error {
	return m.validate(true)
}

func (m *Slice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return SliceMultiError(errors)
	}

	return nil
}

// SliceMultiError is an error wrapping multiple validation errors returned by
// Slice.ValidateAll() if the designated constraints aren't met.
type SliceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SliceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SliceMultiError) AllErrors() []error { return m }

// SliceValidationError is the validation error returned by Slice.Validate if
// the designated constraints aren't met.
type SliceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SliceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SliceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SliceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SliceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SliceValidationError) ErrorName() string { return "SliceValidationError" }

// Error satisfies the builtin error interface
func (e SliceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SliceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SliceValidationError{}

// Validate checks the field values on GetSlicesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSlicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSlicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSlicesResponseMultiError, or nil if none found.
func (m *GetSlicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSlicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSlices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSlicesResponseValidationError{
						field:  fmt.Sprintf("Slices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSlicesResponseValidationError{
						field:  fmt.Sprintf("Slices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSlicesResponseValidationError{
					field:  fmt.Sprintf("Slices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSlicesResponseMultiError(errors)
	}

	return nil
}

// GetSlicesResponseMultiError is an error wrapping multiple validation errors
// returned by GetSlicesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSlicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSlicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSlicesResponseMultiError) AllErrors() []error { return m }

// GetSlicesResponseValidationError is the validation error returned by
// GetSlicesResponse.Validate if the designated constraints aren't met.
type GetSlicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSlicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSlicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSlicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSlicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSlicesResponseValidationError) ErrorName() string {
	return "GetSlicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSlicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSlicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSlicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSlicesResponseValidationError{}

// Validate checks the field values on GetSlicesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSlicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSlicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSlicesRequestMultiError, or nil if none found.
func (m *GetSlicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSlicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnterpriseId

	// no validation rules for SiteId

	if len(errors) > 0 {
		return GetSlicesRequestMultiError(errors)
	}

	return nil
}

// GetSlicesRequestMultiError is an error wrapping multiple validation errors
// returned by GetSlicesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSlicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSlicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSlicesRequestMultiError) AllErrors() []error { return m }

// GetSlicesRequestValidationError is the validation error returned by
// GetSlicesRequest.Validate if the designated constraints aren't met.
type GetSlicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSlicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSlicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSlicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSlicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSlicesRequestValidationError) ErrorName() string { return "GetSlicesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSlicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSlicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSlicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSlicesRequestValidationError{}
