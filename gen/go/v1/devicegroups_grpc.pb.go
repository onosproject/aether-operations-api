// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceGroupServiceClient is the client API for DeviceGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceGroupServiceClient interface {
	GetDeviceGroups(ctx context.Context, in *GetDeviceGroupsRequest, opts ...grpc.CallOption) (*GetDeviceGroupsResponse, error)
}

type deviceGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceGroupServiceClient(cc grpc.ClientConnInterface) DeviceGroupServiceClient {
	return &deviceGroupServiceClient{cc}
}

func (c *deviceGroupServiceClient) GetDeviceGroups(ctx context.Context, in *GetDeviceGroupsRequest, opts ...grpc.CallOption) (*GetDeviceGroupsResponse, error) {
	out := new(GetDeviceGroupsResponse)
	err := c.cc.Invoke(ctx, "/devicegroups.v1.DeviceGroupService/GetDeviceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceGroupServiceServer is the server API for DeviceGroupService service.
// All implementations must embed UnimplementedDeviceGroupServiceServer
// for forward compatibility
type DeviceGroupServiceServer interface {
	GetDeviceGroups(context.Context, *GetDeviceGroupsRequest) (*GetDeviceGroupsResponse, error)
	mustEmbedUnimplementedDeviceGroupServiceServer()
}

// UnimplementedDeviceGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceGroupServiceServer struct {
}

func (UnimplementedDeviceGroupServiceServer) GetDeviceGroups(context.Context, *GetDeviceGroupsRequest) (*GetDeviceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceGroups not implemented")
}
func (UnimplementedDeviceGroupServiceServer) mustEmbedUnimplementedDeviceGroupServiceServer() {}

// UnsafeDeviceGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceGroupServiceServer will
// result in compilation errors.
type UnsafeDeviceGroupServiceServer interface {
	mustEmbedUnimplementedDeviceGroupServiceServer()
}

func RegisterDeviceGroupServiceServer(s grpc.ServiceRegistrar, srv DeviceGroupServiceServer) {
	s.RegisterService(&DeviceGroupService_ServiceDesc, srv)
}

func _DeviceGroupService_GetDeviceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServiceServer).GetDeviceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicegroups.v1.DeviceGroupService/GetDeviceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServiceServer).GetDeviceGroups(ctx, req.(*GetDeviceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceGroupService_ServiceDesc is the grpc.ServiceDesc for DeviceGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devicegroups.v1.DeviceGroupService",
	HandlerType: (*DeviceGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceGroups",
			Handler:    _DeviceGroupService_GetDeviceGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devicegroups.proto",
}
