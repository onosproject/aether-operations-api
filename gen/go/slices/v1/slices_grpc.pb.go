// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SliceServiceClient is the client API for SliceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SliceServiceClient interface {
	GetSlices(ctx context.Context, in *GetSlicesRequest, opts ...grpc.CallOption) (*GetSlicesResponse, error)
}

type sliceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSliceServiceClient(cc grpc.ClientConnInterface) SliceServiceClient {
	return &sliceServiceClient{cc}
}

func (c *sliceServiceClient) GetSlices(ctx context.Context, in *GetSlicesRequest, opts ...grpc.CallOption) (*GetSlicesResponse, error) {
	out := new(GetSlicesResponse)
	err := c.cc.Invoke(ctx, "/slices.v1.SliceService/GetSlices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SliceServiceServer is the server API for SliceService service.
// All implementations must embed UnimplementedSliceServiceServer
// for forward compatibility
type SliceServiceServer interface {
	GetSlices(context.Context, *GetSlicesRequest) (*GetSlicesResponse, error)
	mustEmbedUnimplementedSliceServiceServer()
}

// UnimplementedSliceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSliceServiceServer struct {
}

func (UnimplementedSliceServiceServer) GetSlices(context.Context, *GetSlicesRequest) (*GetSlicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlices not implemented")
}
func (UnimplementedSliceServiceServer) mustEmbedUnimplementedSliceServiceServer() {}

// UnsafeSliceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SliceServiceServer will
// result in compilation errors.
type UnsafeSliceServiceServer interface {
	mustEmbedUnimplementedSliceServiceServer()
}

func RegisterSliceServiceServer(s grpc.ServiceRegistrar, srv SliceServiceServer) {
	s.RegisterService(&SliceService_ServiceDesc, srv)
}

func _SliceService_GetSlices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliceServiceServer).GetSlices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slices.v1.SliceService/GetSlices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliceServiceServer).GetSlices(ctx, req.(*GetSlicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SliceService_ServiceDesc is the grpc.ServiceDesc for SliceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SliceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slices.v1.SliceService",
	HandlerType: (*SliceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSlices",
			Handler:    _SliceService_GetSlices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slices/v1/slices.proto",
}
